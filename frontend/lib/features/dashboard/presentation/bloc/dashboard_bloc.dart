// Path: frontend/lib/features/dashboard/presentation/bloc/dashboard_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:tp_rfid/core/errors/failures.dart';
import 'package:tp_rfid/core/utils/either.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/asset_distribution.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/assets_by_plant.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/audit_progress.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/dashboard_stats.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/growth_trend.dart';
import 'package:tp_rfid/features/dashboard/domain/entities/location_analytics.dart';
import 'package:tp_rfid/features/dashboard/domain/usecases/get_location_analytics_usecase.dart';
import '../../domain/usecases/get_dashboard_stats_usecase.dart';
import '../../domain/usecases/get_asset_distribution_usecase.dart';
import '../../domain/usecases/get_assets_by_plant_usecase.dart';
import '../../domain/usecases/get_growth_trends_usecase.dart';
import '../../domain/usecases/get_audit_progress_usecase.dart';
import '../../domain/usecases/clear_dashboard_cache_usecase.dart';
import 'dashboard_event.dart';
import 'dashboard_state.dart';

class DashboardBloc extends Bloc<DashboardEvent, DashboardState> {
  final GetDashboardStatsUseCase getDashboardStatsUseCase;
  final GetAssetDistributionUseCase getAssetDistributionUseCase;
  final GetAssetsByPlantUsecase getAssetsByPlantUsecase;
  final GetGrowthTrendsUseCase getGrowthTrendsUseCase;
  final GetAuditProgressUseCase getAuditProgressUseCase;
  final GetLocationAnalyticsUseCase getLocationAnalyticsUseCase;
  final ClearDashboardCacheUseCase clearDashboardCacheUseCase;

  DashboardBloc({
    required this.getDashboardStatsUseCase,
    required this.getAssetDistributionUseCase,
    required this.getAssetsByPlantUsecase,
    required this.getGrowthTrendsUseCase,
    required this.getAuditProgressUseCase,
    required this.getLocationAnalyticsUseCase,
    required this.clearDashboardCacheUseCase,
  }) : super(const DashboardInitial()) {
    on<LoadInitialDashboard>(_onLoadInitialDashboard);
    on<LoadDashboardStats>(_onLoadDashboardStats);
    on<LoadAssetDistribution>(_onLoadAssetDistribution);
    on<LoadDepartmentGrowthTrends>(_onLoadDepartmentGrowthTrends);
    on<LoadLocationGrowthTrends>(_onLoadLocationGrowthTrends);
    on<LoadAuditProgress>(_onLoadAuditProgress);
    on<RefreshDashboard>(_onRefreshDashboard);
    on<ClearDashboardCache>(_onClearDashboardCache);
    on<ChangePeriodFilter>(_onChangePeriodFilter);
    on<ChangePlantFilter>(_onChangePlantFilter);
    on<ToggleDetailsView>(_onToggleDetailsView);
    on<ResetFilters>(_onResetFilters);
    on<LoadLocationAnalytics>(_onLoadLocationAnalytics);
  }

  /// Load department growth trends
  Future<void> _onLoadDepartmentGrowthTrends(
    LoadDepartmentGrowthTrends event,
    Emitter<DashboardState> emit,
  ) async {
    final currentState = state;

    if (currentState is DashboardLoaded) {
      emit(
        DashboardPartialLoading(
          currentState: currentState,
          loadingType: 'department_trends',
        ),
      );
    } else {
      emit(
        const DashboardLoading(loadingMessage: 'Loading department trends...'),
      );
    }

    final result = await getGrowthTrendsUseCase(
      GetGrowthTrendsParams(
        deptCode: event.deptCode,
        locationCode: null, // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö department trends
        period: event.period,
        year: event.year,
        startDate: event.startDate,
        endDate: event.endDate,
        groupBy: event.groupBy,
      ),
    );

    result.fold(
      (failure) {
        emit(
          DashboardError(
            message: 'Failed to load department trends: ${failure.message}',
            errorCode: 'DEPARTMENT_TRENDS_ERROR',
            previousState: currentState is DashboardLoaded
                ? currentState
                : null,
          ),
        );
      },
      (trends) {
        if (currentState is DashboardLoaded) {
          emit(
            currentState.copyWith(
              departmentGrowthTrend: trends,
              departmentGrowthDeptFilter: event.deptCode,
              lastUpdated: DateTime.now(),
            ),
          );
        } else {
          emit(
            DashboardLoaded(
              departmentGrowthTrend: trends,
              departmentGrowthDeptFilter: event.deptCode,
              lastUpdated: DateTime.now(),
            ),
          );
        }
      },
    );
  }

  /// Load location growth trends
  Future<void> _onLoadLocationGrowthTrends(
    LoadLocationGrowthTrends event,
    Emitter<DashboardState> emit,
  ) async {
    print('üî• BLoC received locationCode: ${event.locationCode}');

    final currentState = state;

    if (currentState is DashboardLoaded) {
      emit(
        DashboardPartialLoading(
          currentState: currentState,
          loadingType: 'location_trends',
        ),
      );
    } else {
      emit(
        const DashboardLoading(loadingMessage: 'Loading location trends...'),
      );
    }

    print('üî• API call with params: locationCode=${event.locationCode}');

    print('üîç About to call getGrowthTrendsUseCase with:');
    print('üîç - locationCode: ${event.locationCode}');
    print('üîç - period: ${event.period}');

    final result = await getGrowthTrendsUseCase(
      GetGrowthTrendsParams(
        deptCode: null,
        locationCode: event.locationCode,
        period: event.period,
        year: event.year,
        startDate: event.startDate,
        endDate: event.endDate,
        groupBy: event.groupBy,
      ),
    );

    print('üîç getGrowthTrendsUseCase completed');

    result.fold(
      (failure) {
        print('üî• API failed: ${failure.message}');
        emit(
          DashboardError(
            message: 'Failed to load location trends: ${failure.message}',
            errorCode: 'LOCATION_TRENDS_ERROR',
            previousState: currentState is DashboardLoaded
                ? currentState
                : null,
          ),
        );
      },
      (trends) {
        print('üî• API success: ${trends.trends.length} trends found');
        if (trends.trends.isNotEmpty) {
          print(
            'üî• First trend: ${trends.trends.first.period} - ${trends.trends.first.assetCount} assets',
          );
        }

        if (currentState is DashboardLoaded) {
          print('üî• Emitting new state with locationGrowthTrend updated');
          print(
            'üî• Old trends count: ${currentState.locationGrowthTrend?.trends.length ?? 0}',
          );
          print('üî• New trends count: ${trends.trends.length}');

          emit(
            currentState.copyWith(
              locationGrowthTrend: trends,
              locationGrowthLocationFilter: event.locationCode,
              lastUpdated: DateTime.now(),
            ),
          );
          print('üî• State emitted successfully');
        } else {
          print('üî• Creating new DashboardLoaded state');
          emit(
            DashboardLoaded(
              locationGrowthTrend: trends,
              locationGrowthLocationFilter: event.locationCode,
              lastUpdated: DateTime.now(),
            ),
          );
          print('üî• New state created successfully');
        }
      },
    );
  }

  /// Load initial dashboard data
  Future<void> _onLoadInitialDashboard(
    LoadInitialDashboard event,
    Emitter<DashboardState> emit,
  ) async {
    emit(const DashboardLoading(loadingMessage: 'Loading dashboard...'));

    try {

      // Load all dashboard data in parallel
      final Future<Either<Failure, DashboardStats>> statsResult =
          getDashboardStatsUseCase(
            const GetDashboardStatsParams(period: 'today'),
          );

      final Future<Either<Failure, AssetDistribution>> distributionResult =
          getAssetDistributionUseCase(GetAssetDistributionParams.all());

      final Future<Either<Failure, GrowthTrend>> departmentTrendsResult =
          getGrowthTrendsUseCase(
            GetGrowthTrendsParams(
              deptCode: null,
              locationCode: null,
              period: 'Q2',
              year: DateTime.now().year,
            ),
          );

      final Future<Either<Failure, GrowthTrend>> locationTrendsResult =
          getGrowthTrendsUseCase(
            GetGrowthTrendsParams(
              deptCode: null,
              locationCode: null,
              period: 'Q2',
              year: DateTime.now().year,
            ),
          );

      final Future<Either<Failure, AuditProgress>> auditResult =
          getAuditProgressUseCase(GetAuditProgressParams.overview());

      final Future<Either<Failure, LocationAnalytics>> locationAnalyticsResult =
          getLocationAnalyticsUseCase(
            GetLocationAnalyticsParams.allLocations(),
          );

      final Future<Either<Failure, AssetsByPlant>> assetsByPlantResult =
          getAssetsByPlantUsecase();

      // Wait for all results
      final results = await Future.wait([
        statsResult,
        distributionResult,
        departmentTrendsResult,
        locationTrendsResult,
        auditResult,
        locationAnalyticsResult,
        assetsByPlantResult,
      ]);

      // Check if any critical data failed to load
      if (results[0].isLeft) {
        emit(
          const DashboardError(
            message: 'Failed to load dashboard statistics',
            errorCode: 'STATS_LOAD_ERROR',
          ),
        );
        return;
      }

      emit(
        DashboardLoaded(
          stats: results[0].fold((l) => null, (r) => r as DashboardStats?),
          distribution: results[1].fold(
            (l) => null,
            (r) => r as AssetDistribution?,
          ),
          departmentGrowthTrend: results[2].fold(
            (l) => null,
            (r) => r as GrowthTrend?,
          ),
          locationGrowthTrend: results[3].fold(
            (l) => null,
            (r) => r as GrowthTrend?,
          ),
          auditProgress: results[4].fold(
            (l) => null,
            (r) => r as AuditProgress?,
          ),
          locationAnalytics: results[5].fold(
            (l) => null,
            (r) => r as LocationAnalytics?,
          ),
          assetsByPlant: results[6].fold(
            (l) => null,
            (r) => r as AssetsByPlant?,
          ),
          lastUpdated: DateTime.now(),
        ),
      );

    } catch (e) {
      emit(
        DashboardError(
          message: 'Unexpected error loading dashboard: $e',
          errorCode: 'UNEXPECTED_ERROR',
        ),
      );
    }
  }

  /// Load dashboard statistics
  Future<void> _onLoadDashboardStats(
    LoadDashboardStats event,
    Emitter<DashboardState> emit,
  ) async {
    final currentState = state;

    if (currentState is DashboardLoaded) {
      emit(
        DashboardPartialLoading(
          currentState: currentState,
          loadingType: 'stats',
        ),
      );
    } else {
      emit(const DashboardLoading(loadingMessage: 'Loading statistics...'));
    }

    final result = await getDashboardStatsUseCase(
      GetDashboardStatsParams(period: event.period),
    );

    result.fold(
      (failure) {
        emit(
          DashboardError(
            message: 'Failed to load statistics: ${failure.message}',
            errorCode: 'STATS_ERROR',
            previousState: currentState is DashboardLoaded
                ? currentState
                : null,
          ),
        );
      },
      (stats) {
        if (currentState is DashboardLoaded) {
          emit(
            currentState.copyWith(
              stats: stats,
              currentPeriod: event.period,
              lastUpdated: DateTime.now(),
            ),
          );
        } else {
          emit(
            DashboardLoaded(
              stats: stats,
              currentPeriod: event.period,
              lastUpdated: DateTime.now(),
            ),
          );
        }
      },
    );
  }

  /// Load asset distribution
  Future<void> _onLoadAssetDistribution(
    LoadAssetDistribution event,
    Emitter<DashboardState> emit,
  ) async {
    final currentState = state;

    if (currentState is DashboardLoaded) {
      emit(
        DashboardPartialLoading(
          currentState: currentState,
          loadingType: 'distribution',
        ),
      );
    } else {
      emit(const DashboardLoading(loadingMessage: 'Loading distribution...'));
    }

    final result = await getAssetDistributionUseCase(
      GetAssetDistributionParams(plantCode: event.plantCode),
    );

    result.fold(
      (failure) {
        emit(
          DashboardError(
            message: 'Failed to load distribution: ${failure.message}',
            errorCode: 'DISTRIBUTION_ERROR',
            previousState: currentState is DashboardLoaded
                ? currentState
                : null,
          ),
        );
      },
      (distribution) {
        if (currentState is DashboardLoaded) {
          emit(
            currentState.copyWith(
              distribution: distribution,
              currentPlantFilter: event.plantCode,
              lastUpdated: DateTime.now(),
            ),
          );
        } else {
          emit(
            DashboardLoaded(
              distribution: distribution,
              currentPlantFilter: event.plantCode,
              lastUpdated: DateTime.now(),
            ),
          );
        }
      },
    );
  }

  /// Load audit progress
  Future<void> _onLoadAuditProgress(
    LoadAuditProgress event,
    Emitter<DashboardState> emit,
  ) async {
    // 1. ‡∏î‡∏∂‡∏á baseLoadedState ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô DashboardLoaded ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    //    ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Bloc ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô DashboardLoaded ‡∏´‡∏£‡∏∑‡∏≠ DashboardPartialLoading
    DashboardLoaded? baseLoadedState;
    if (state is DashboardLoaded) {
      baseLoadedState = state as DashboardLoaded;
    } else if (state is DashboardPartialLoading) {
      baseLoadedState = (state as DashboardPartialLoading).currentState;
    }

    // 2. Emit partial loading state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å UI ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    if (baseLoadedState != null) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
      emit(
        DashboardPartialLoading(
          currentState: baseLoadedState,
          loadingType: 'audit',
        ),
      );
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Loading ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      emit(const DashboardLoading(loadingMessage: 'Loading audit progress...'));
    }

    // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô UseCase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    final result = await getAuditProgressUseCase(
      GetAuditProgressParams(
        deptCode: event
            .deptCode, // event.deptCode ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å All Departments
        includeDetails: event.includeDetails,
        auditStatus: event.auditStatus,
      ),
    );

    // 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å UseCase
    result.fold(
      (failure) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        emit(
          DashboardError(
            message: 'Failed to load audit progress: ${failure.message}',
            errorCode: 'AUDIT_ERROR',
            previousState:
                baseLoadedState, // ‡πÉ‡∏ä‡πâ baseLoadedState ‡πÄ‡∏õ‡πá‡∏ô previous state
          ),
        );
      },
      (audit) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (baseLoadedState != null) {
          print(
            'üî• BLoC: Emitting DashboardLoaded with auditProgressDeptFilter: ${event.deptCode}',
          );
          emit(
            // ‡πÉ‡∏ä‡πâ baseLoadedState.copyWith() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
            // auditProgressDeptFilter ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô event.deptCode (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å All)
            baseLoadedState.copyWith(
              auditProgress: audit,
              auditProgressDeptFilter:
                  event.deptCode, // <<< ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ deptCode
              includeDetails: event.includeDetails,
              lastUpdated: DateTime.now(),
            ),
          );
        } else {
          // ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ DashboardLoaded state ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
          print(
            'üî• BLoC: Creating new DashboardLoaded state from scratch for audit progress',
          );
          emit(
            DashboardLoaded(
              auditProgress: audit,
              auditProgressDeptFilter:
                  event.deptCode, // <<< ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ deptCode
              includeDetails: event.includeDetails,
              lastUpdated: DateTime.now(),
              // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÉ‡∏´‡∏°‡πà
              stats: null,
              distribution: null,
              departmentGrowthTrend: null,
              locationGrowthTrend: null,
              locationAnalytics: null,
              currentPeriod: 'today',
              currentPlantFilter: null,
              departmentGrowthDeptFilter: null,
              locationGrowthLocationFilter: null,
              locationAnalyticsLocationFilter: null,
            ),
          );
        }
      },
    );
  }

  /// Refresh all dashboard data
  Future<void> _onRefreshDashboard(
    RefreshDashboard event,
    Emitter<DashboardState> emit,
  ) async {
    emit(const DashboardLoading(loadingMessage: 'Refreshing dashboard...'));

    // Clear cache first to ensure fresh data
    await clearDashboardCacheUseCase();

    // Reload all data
    add(const LoadInitialDashboard());
  }

  /// Clear dashboard cache
  Future<void> _onClearDashboardCache(
    ClearDashboardCache event,
    Emitter<DashboardState> emit,
  ) async {
    final result = await clearDashboardCacheUseCase();

    result.fold(
      (failure) {
        emit(
          DashboardError(
            message: 'Failed to clear cache: ${failure.message}',
            errorCode: 'CACHE_CLEAR_ERROR',
          ),
        );
      },
      (_) {
        emit(const DashboardCacheCleared());
      },
    );
  }

  /// Change period filter
  Future<void> _onChangePeriodFilter(
    ChangePeriodFilter event,
    Emitter<DashboardState> emit,
  ) async {
    add(LoadDashboardStats(period: event.period));
  }

  /// Change plant filter
  Future<void> _onChangePlantFilter(
    ChangePlantFilter event,
    Emitter<DashboardState> emit,
  ) async {
    add(LoadAssetDistribution(plantCode: event.plantCode));
  }

  /// Toggle details view
  Future<void> _onToggleDetailsView(
    ToggleDetailsView event,
    Emitter<DashboardState> emit,
  ) async {
    final currentState = state;
    if (currentState is DashboardLoaded) {
      add(
        LoadAuditProgress(
          deptCode: currentState.auditProgressDeptFilter,
          includeDetails: event.includeDetails,
        ),
      );
    }
  }

  /// Reset all filters
  Future<void> _onResetFilters(
    ResetFilters event,
    Emitter<DashboardState> emit,
  ) async {
    add(const LoadInitialDashboard());
  }

  /// Load location analytics
  Future<void> _onLoadLocationAnalytics(
    LoadLocationAnalytics event,
    Emitter<DashboardState> emit,
  ) async {
    final currentState = state;

    if (currentState is DashboardLoaded) {
      emit(
        DashboardPartialLoading(
          currentState: currentState,
          loadingType: 'location_analytics',
        ),
      );
    } else {
      emit(
        const DashboardLoading(loadingMessage: 'Loading location analytics...'),
      );
    }

    final result = await getLocationAnalyticsUseCase(
      GetLocationAnalyticsParams(
        locationCode: event.locationCode,
        period: event.period,
        year: event.year,
        startDate: event.startDate,
        endDate: event.endDate,
        includeTrends: event.includeTrends,
      ),
    );

    result.fold(
      (failure) {
        print('‚ùå Location Analytics failure: ${failure.message}');
        emit(
          DashboardError(
            message: 'Failed to load location analytics: ${failure.message}',
            errorCode: 'LOCATION_ANALYTICS_ERROR',
            previousState: currentState is DashboardLoaded
                ? currentState
                : null,
          ),
        );
      },
      (locationAnalytics) {
        // Location Analytics success

        if (currentState is DashboardLoaded) {
          emit(
            currentState.copyWith(
              locationAnalytics: locationAnalytics,
              locationAnalyticsLocationFilter: event.locationCode,
              lastUpdated: DateTime.now(),
            ),
          );
        } else {
          emit(
            DashboardLoaded(
              locationAnalytics: locationAnalytics,
              locationAnalyticsLocationFilter: event.locationCode,
              lastUpdated: DateTime.now(),
            ),
          );
        }
      },
    );
  }
}
