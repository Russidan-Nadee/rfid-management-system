// Path: backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model asset_master {
  asset_no       String               @id @db.VarChar(20)
  epc_code       String?              @unique @db.VarChar(50)
  description    String?              @db.VarChar(255)
  plant_code     String?              @db.VarChar(10)
  location_code  String?              @db.VarChar(10)
  dept_code      String?              @db.VarChar(10)
  serial_no      String?              @unique(map: "serial_no") @db.VarChar(50)
  inventory_no   String?              @unique(map: "inventory_no") @db.VarChar(50)
  quantity       Decimal?             @db.Decimal(10, 2)
  unit_code      String?              @db.VarChar(10)
  category_code  String?              @db.VarChar(10)
  brand_code     String?              @db.VarChar(10)
  status         asset_master_status? @default(C)
  created_by     String?              @db.VarChar(20)
  created_at     DateTime?            @db.DateTime(0)
  deactivated_at DateTime?            @db.DateTime(0)

  // Relations with Master Tables (ทั้งหมดเป็น optional)
  mst_plant      mst_plant?      @relation(fields: [plant_code], references: [plant_code], onDelete: SetNull, onUpdate: Cascade, map: "asset_master_ibfk_1")
  mst_location   mst_location?   @relation(fields: [location_code], references: [location_code], onDelete: SetNull, onUpdate: Cascade, map: "asset_master_ibfk_2")
  mst_unit       mst_unit?       @relation(fields: [unit_code], references: [unit_code], onDelete: Restrict, onUpdate: Cascade, map: "asset_master_ibfk_3")
  mst_user       mst_user?       @relation(fields: [created_by], references: [user_id], onDelete: Restrict, map: "fk_asset_master_created_by")
  mst_department mst_department? @relation(fields: [dept_code], references: [dept_code], onDelete: SetNull, onUpdate: Cascade, map: "fk_asset_master_dept_code")
  mst_category   mst_category?   @relation(fields: [category_code], references: [category_code], onDelete: SetNull, onUpdate: Cascade, map: "fk_asset_master_category_code")
  mst_brand      mst_brand?      @relation(fields: [brand_code], references: [brand_code], onDelete: SetNull, onUpdate: Cascade, map: "fk_asset_master_brand_code")

  // Relations with Transaction Tables
  asset_scan_log       asset_scan_log[]
  asset_status_history asset_status_history[]
  asset_image          asset_image[]
  problem_notification problem_notification[]

  // Database Indexes
  @@index([unit_code], map: "fk_asset_master_unit_code")
  @@index([category_code], map: "idx_asset_master_category_code")
  @@index([brand_code], map: "idx_asset_master_brand_code")
  @@index([created_at], map: "idx_asset_master_created_at")
  @@index([created_by], map: "idx_asset_master_created_by")
  @@index([dept_code], map: "idx_asset_master_dept_code")
  @@index([location_code], map: "idx_asset_master_location_code")
  @@index([plant_code], map: "idx_asset_master_plant_code")
  @@index([status], map: "idx_asset_master_status")
}

model asset_image {
  id       Int    @id @default(autoincrement())
  asset_no String @db.VarChar(20)

  // External storage URLs จาก dev server response
  file_url                String  @db.VarChar(500) // FileUrl from dev server
  file_thumbnail_url      String  @db.VarChar(500) // FileThumbnailUrl from dev server
  external_file_path      String? @db.VarChar(500) // FilePath (physical path on dev server)
  external_thumbnail_path String? @db.VarChar(500) // FileThumbnailPath (physical thumbnail path)
  file_type_external      String? @db.VarChar(100) // FileType from dev server response

  // ข้อมูลไฟล์ที่ยังต้องใช้
  file_name     String  @db.VarChar(255)
  original_name String  @db.VarChar(255)
  file_size     BigInt?
  width         Int?
  height        Int?

  // Metadata
  is_primary  Boolean @default(false)
  alt_text    String? @db.VarChar(255)
  description String? @db.VarChar(500)
  category    String? @db.VarChar(50)

  // Audit fields
  created_by String?   @db.VarChar(20)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @db.DateTime(0)
  updated_by String?   @db.VarChar(20)

  // Relations
  asset_master asset_master @relation(fields: [asset_no], references: [asset_no], onDelete: Cascade)

  // Indexes
  @@index([asset_no], map: "idx_asset_image_asset_no")
  @@index([is_primary], map: "idx_asset_image_primary")
  @@index([created_at], map: "idx_asset_image_created_at")
  @@index([asset_no, is_primary], map: "idx_asset_image_asset_primary")
}

model asset_scan_log {
  scan_id       Int           @id @default(autoincrement())
  asset_no      String?       @db.VarChar(20)
  scanned_by    String?       @db.VarChar(20)
  location_code String?       @db.VarChar(10)
  ip_address    String?       @db.VarChar(45)
  user_agent    String?       @db.Text
  scanned_at    DateTime?     @default(now()) @db.Timestamp(0)
  asset_master  asset_master? @relation(fields: [asset_no], references: [asset_no], onDelete: NoAction, onUpdate: NoAction, map: "fk_scan_asset")
  mst_location  mst_location? @relation(fields: [location_code], references: [location_code], onDelete: NoAction, onUpdate: NoAction, map: "fk_scan_location")
  mst_user      mst_user?     @relation(fields: [scanned_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_scan_user")

  @@index([asset_no], map: "fk_scan_asset")
  @@index([location_code], map: "fk_scan_location")
  @@index([scanned_by], map: "fk_scan_user")
  @@index([scanned_at], map: "idx_asset_scan_log_scanned_at")
}

model asset_status_history {
  history_id   Int           @id @default(autoincrement())
  asset_no     String?       @db.VarChar(20)
  old_status   String?       @db.VarChar(50)
  new_status   String?       @db.VarChar(50)
  changed_at   DateTime?     @db.DateTime(0)
  changed_by   String?       @db.VarChar(20)
  remarks      String?       @db.Text
  asset_master asset_master? @relation(fields: [asset_no], references: [asset_no], onDelete: NoAction, onUpdate: NoAction, map: "asset_status_history_ibfk_1")
  mst_user     mst_user?     @relation(fields: [changed_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "asset_status_history_ibfk_2")

  @@index([asset_no], map: "asset_no")
  @@index([changed_at], map: "idx_asset_status_history_changed_at")
  @@index([changed_by], map: "changed_by")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model export_history {
  export_id     Int                        @id @default(autoincrement())
  user_id       String                     @db.VarChar(20)
  export_type   export_history_export_type
  status        String                     @default("P") @db.Char(1)
  export_config Json
  file_path     String?                    @db.VarChar(500)
  file_size     BigInt?
  total_records Int?
  created_at    DateTime                   @default(now()) @db.DateTime(0)
  expires_at    DateTime?                  @db.DateTime(0)
  error_message String?                    @db.Text
  mst_user      mst_user                   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_export_user")

  @@index([expires_at, status], map: "idx_cleanup")
  @@index([created_at], map: "idx_created_at")
  @@index([user_id, status, created_at], map: "idx_user_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mst_brand {
  brand_code  String   @id @db.VarChar(10)
  brand_name  String   @unique @db.VarChar(100)
  description String?  @db.VarChar(255)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @updatedAt @db.DateTime(0)

  // Relations
  asset_master asset_master[]

  @@index([brand_name], map: "idx_mst_brand_name")
  @@index([is_active], map: "idx_mst_brand_active")
}

model mst_category {
  category_code String   @id @db.VarChar(10)
  category_name String   @unique @db.VarChar(100)
  description   String?  @db.VarChar(255)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @updatedAt @db.DateTime(0)

  asset_master asset_master[]

  @@index([category_name], map: "idx_mst_category_name")
}

model mst_department {
  dept_code    String         @id @db.VarChar(10)
  description  String?        @db.VarChar(255)
  plant_code   String         @db.VarChar(10)
  mst_plant    mst_plant      @relation(fields: [plant_code], references: [plant_code], onDelete: Restrict, onUpdate: Cascade, map: "fk_mst_department_plant_code")
  asset_master asset_master[]

  @@index([plant_code], map: "idx_mst_department_plant_code")
}

model mst_location {
  location_code  String           @id @db.VarChar(10)
  description    String?          @db.VarChar(255)
  plant_code     String?          @db.VarChar(10)
  asset_master   asset_master[]
  asset_scan_log asset_scan_log[]
  mst_plant      mst_plant?       @relation(fields: [plant_code], references: [plant_code], onDelete: Restrict, onUpdate: Cascade, map: "mst_location_ibfk_1")

  @@index([plant_code], map: "plant_code")
  @@index([plant_code], map: "idx_mst_location_plant_code")
}

model mst_plant {
  plant_code     String           @id @db.VarChar(10)
  description    String?          @db.VarChar(255)
  asset_master   asset_master[]
  mst_location   mst_location[]
  mst_department mst_department[]

  @@index([description], map: "idx_mst_plant_description")
}

model mst_unit {
  unit_code    String         @id @db.VarChar(10)
  name         String?        @db.VarChar(50)
  asset_master asset_master[]

  @@index([name], map: "idx_mst_unit_name")
}

model mst_user {
  user_id   String  @id @db.VarChar(20)
  full_name String? @db.VarChar(255)

  // Employee Information from Employee Information System
  employee_id  String? @unique @db.VarChar(20)
  department   String? @db.VarChar(100)
  position     String? @db.VarChar(100)
  company_role String? @db.VarChar(50)
  email        String? @db.VarChar(255)

  // System role (THIS system only - for permissions)
  role mst_user_role @default(viewer)

  // Status and audit
  is_active  Boolean   @default(true)
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
  last_login DateTime? @db.DateTime(0)

  // Relations
  asset_master               asset_master[]
  asset_scan_log             asset_scan_log[]
  asset_status_history       asset_status_history[]
  export_history             export_history[]
  user_login_log             user_login_log[]
  reported_notifications     problem_notification[] @relation("NotificationReporter")
  acknowledged_notifications problem_notification[] @relation("NotificationAcknowledger")
  resolved_notifications     problem_notification[] @relation("NotificationResolver")

  @@index([employee_id], map: "idx_mst_user_employee_id")
  @@index([full_name], map: "idx_mst_user_full_name")
  @@index([role], map: "idx_mst_user_role")
  @@index([is_active], map: "idx_mst_user_active")
}

model sequelizemeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model user_login_log {
  log_id     Int                        @id @default(autoincrement())
  user_id    String?                    @db.VarChar(20)
  username   String?                    @db.VarChar(100)
  event_type user_login_log_event_type?
  timestamp  DateTime?                  @default(now()) @db.DateTime(0)
  ip_address String?                    @db.VarChar(50)
  user_agent String?                    @db.Text
  session_id String?                    @db.VarChar(255)
  success    Boolean?                   @default(true)
  mst_user   mst_user?                  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_login_log_user")

  @@index([event_type], map: "idx_user_login_log_event_type")
  @@index([timestamp], map: "idx_user_login_log_timestamp")
  @@index([user_id], map: "fk_user_login_log_user")
}

enum export_history_export_type {
  assets
  scan_logs
  status_history
}

enum user_login_log_event_type {
  login
  logout
  failed_login
  password_change
}

enum mst_user_role {
  admin
  manager
  staff
  viewer
}

enum asset_master_status {
  A
  C
  I
}

model problem_notification {
  notification_id Int                           @id @default(autoincrement())
  asset_no        String?                       @db.VarChar(20)
  reported_by     String                        @db.VarChar(20)
  problem_type    problem_notification_type
  priority        problem_notification_priority @default(normal)
  subject         String                        @db.VarChar(255)
  description     String                        @db.Text
  status          problem_notification_status   @default(pending)
  acknowledged_by String?                       @db.VarChar(20)
  acknowledged_at DateTime?                     @db.DateTime(0)
  resolved_by     String?                       @db.VarChar(20)
  resolved_at     DateTime?                     @db.DateTime(0)
  resolution_note String?                       @db.Text
  rejection_note  String?                       @db.Text
  created_at      DateTime                      @default(now()) @db.DateTime(0)
  updated_at      DateTime                      @updatedAt @db.DateTime(0)

  // Relations
  asset_master asset_master? @relation(fields: [asset_no], references: [asset_no], onDelete: SetNull)
  reporter     mst_user      @relation("NotificationReporter", fields: [reported_by], references: [user_id], onDelete: Restrict)
  acknowledger mst_user?     @relation("NotificationAcknowledger", fields: [acknowledged_by], references: [user_id], onDelete: SetNull)
  resolver     mst_user?     @relation("NotificationResolver", fields: [resolved_by], references: [user_id], onDelete: SetNull)

  @@index([asset_no], map: "idx_problem_notification_asset_no")
  @@index([reported_by], map: "idx_problem_notification_reported_by")
  @@index([status], map: "idx_problem_notification_status")
  @@index([priority], map: "idx_problem_notification_priority")
  @@index([created_at], map: "idx_problem_notification_created_at")
  @@index([problem_type], map: "idx_problem_notification_type")
}

enum problem_notification_type {
  asset_damage
  asset_missing
  location_issue
  data_error
  urgent_issue
  other
}

enum problem_notification_priority {
  low
  normal
  high
  critical
}

enum problem_notification_status {
  pending
  acknowledged
  in_progress
  resolved
  cancelled
}
